{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNXZP5pHJvx/YoclCWa8VJQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sarahroyle/SDA-Group-Work/blob/main/Neural_Network_Assignment_Sarah_Royle\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 1.1: Implement a function that computes the forward pass for the fixed weights `w` and bias `b` "
      ],
      "metadata": {
        "id": "SUwQD2Zl_RrJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "z_M51Cq202B9"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "from torch import nn"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fix weight matrix for better comparison\n",
        "w = np.arange(32*10).reshape(10, 32)\n",
        "# Fix bias\n",
        "b = np.arange(10)\n",
        "print(f\"fix weights: {w}\")\n",
        "print(f\"fix bias: {b}\")"
      ],
      "metadata": {
        "id": "K0gVNzRxYU1t",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "020e59f9-96eb-4ac2-fbcf-077ba6f4be0d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fix weights: [[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n",
            "   18  19  20  21  22  23  24  25  26  27  28  29  30  31]\n",
            " [ 32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49\n",
            "   50  51  52  53  54  55  56  57  58  59  60  61  62  63]\n",
            " [ 64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81\n",
            "   82  83  84  85  86  87  88  89  90  91  92  93  94  95]\n",
            " [ 96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113\n",
            "  114 115 116 117 118 119 120 121 122 123 124 125 126 127]\n",
            " [128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145\n",
            "  146 147 148 149 150 151 152 153 154 155 156 157 158 159]\n",
            " [160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177\n",
            "  178 179 180 181 182 183 184 185 186 187 188 189 190 191]\n",
            " [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209\n",
            "  210 211 212 213 214 215 216 217 218 219 220 221 222 223]\n",
            " [224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241\n",
            "  242 243 244 245 246 247 248 249 250 251 252 253 254 255]\n",
            " [256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273\n",
            "  274 275 276 277 278 279 280 281 282 283 284 285 286 287]\n",
            " [288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305\n",
            "  306 307 308 309 310 311 312 313 314 315 316 317 318 319]]\n",
            "fix bias: [0 1 2 3 4 5 6 7 8 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.random.rand(32)\n",
        "\n",
        "def relu(Z):\n",
        "    return np.maximum(0,Z)\n",
        "\n",
        "def Ex1_propagation(x, w, b):\n",
        "    Z = np.dot(w, x) + b\n",
        "    return relu(Z)     \n",
        "\n",
        "Ex1_propagation(x, w, b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5fSlXJG2Hpsf",
        "outputId": "4a309907-be0b-4905-e52c-641d69831fb9"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 323.71707788,  948.70005151, 1573.68302513, 2198.66599876,\n",
              "       2823.64897238, 3448.63194601, 4073.61491964, 4698.59789326,\n",
              "       5323.58086689, 5948.56384051])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Korbinian's code to check the answer"
      ],
      "metadata": {
        "id": "J2ezk5CmLJoT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def func_ex1(x):\n",
        "    \"\"\"\n",
        "    This function performs the task of exercise 1\n",
        "    You can use it to test whether \n",
        "    \"\"\"\n",
        "    # Creating a linear layer with pytorch\n",
        "    linear = torch.nn.Linear(32, 10)\n",
        "    # This is a bit ugly because a) you are not supposed to set the weights fixed from outside,\n",
        "    # and b) because we convert numpy arrays to pytorch tensors with the correct dtype\n",
        "    linear.bias = nn.Parameter(torch.tensor(b, dtype=torch.float))\n",
        "    linear.weight = nn.Parameter(torch.tensor(w, dtype=torch.float))\n",
        "    relu = torch.nn.ReLU()\n",
        "\n",
        "    # Processing input\n",
        "    x = x[np.newaxis] # Need to create dummy dimension for batch_size; alternative: reshape, or fancy indexing: x=x[None]\n",
        "    x = torch.tensor(x, dtype=torch.float)\n",
        "    z = linear(x)\n",
        "    a = relu(z)\n",
        "    return a"
      ],
      "metadata": {
        "id": "kQycn3wF3fKm"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "func_ex1(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KKfGBmSq3gFE",
        "outputId": "eeb17cad-38a1-4437-f65a-f19671d1d8f7"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[ 323.7171,  948.7001, 1573.6831, 2198.6660, 2823.6489, 3448.6321,\n",
              "         4073.6147, 4698.5977, 5323.5811, 5948.5635]], grad_fn=<ReluBackward0>)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 1.2: Combine the function of Ex. 1 multiple times with 3 fixed weight matrices of your choosing. Be careful to make sure that input and output dimensions match for all of them."
      ],
      "metadata": {
        "id": "WSb2j0o5_M4B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.random.rand(32)\n",
        "\n",
        "w1 = np.arange(32*10).reshape(10, 32)\n",
        "w2 = np.arange(10*10).reshape(10, 10)\n",
        "w3 = np.arange(10*10).reshape(10, 10)\n",
        "\n",
        "b1 = np.arange(10)\n",
        "b2 = np.arange(10)\n",
        "b3 = np.arange(10)"
      ],
      "metadata": {
        "id": "2ZZwIpEeMCDW"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "z1 = np.dot(w1, x) + b1\n",
        "a1 = relu(z1)\n",
        "\n",
        "z2 = np.dot(w2, a1) + b2\n",
        "a2 = relu(z2)\n",
        "\n",
        "z3 = np.dot(w3, a2) + b3\n",
        "a3 = relu(z3)\n",
        "\n",
        "a3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HVkg545DbFzw",
        "outputId": "68be9207-2da1-4102-830e-6a28496d1ae1"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([9.50934155e+07, 2.50656692e+08, 4.06219969e+08, 5.61783246e+08,\n",
              "       7.17346523e+08, 8.72909799e+08, 1.02847308e+09, 1.18403635e+09,\n",
              "       1.33959963e+09, 1.49516291e+09])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 2: Implement a function that performs the convolutional layer forward pass for 1 fixed filter w and for the given input x. Use stride 1 and no padding."
      ],
      "metadata": {
        "id": "eONDvnzy_H2h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.arange(20) # some input\n",
        "w = ([1,0,1])"
      ],
      "metadata": {
        "id": "C421vxF_N3wh"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def calculation(slice_previous,w):\n",
        "  value = np.dot(slice_previous,w)\n",
        "  return value"
      ],
      "metadata": {
        "id": "qECGtPSeuttf"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "z=[]\n",
        "for i in range(len(x) - 2):\n",
        "  slice_start = i\n",
        "  slice_end = i + (len(w))\n",
        "  slice = (slice_start,slice_end)\n",
        "\n",
        "  slice_previous = x[slice_start:slice_end]\n",
        "  num = calculation(slice_previous,w)\n",
        "  z.append(num)"
      ],
      "metadata": {
        "id": "QzQ-s0sMo_dB"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pqtzIkpbH5X-",
        "outputId": "c18222ea-a1bb-4de3-d528-8a9aa3a47fed"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 2.2: Generalize the function below to handle multiple filters"
      ],
      "metadata": {
        "id": "pk4Lobuk_CzA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.arange(20) # some input\n",
        "w5 = np.array([1,0,1])\n",
        "w6 = np.array([1,1,1])"
      ],
      "metadata": {
        "id": "bgMffbXs4GxI"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "stride = 2\n",
        "\n",
        "def convolution(x,z,w):\n",
        "  z=[]\n",
        "  for i in range(len(x) - (2*stride)):\n",
        "    if i == 0: \n",
        "      slice_start = i  \n",
        "    else: \n",
        "      slice_start = i + stride\n",
        "    if i == 0: \n",
        "      slice_end = i  + (len(w))\n",
        "    else: \n",
        "      slice_end = i + stride + (len(w))\n",
        "    slice = (slice_start,slice_end)\n",
        "\n",
        "    slice_previous = x[slice_start:slice_end]\n",
        "    num = calculation(slice_previous,w)\n",
        "    z.append(num)\n",
        "  return z"
      ],
      "metadata": {
        "id": "LzsUmOa359W1"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "convolution(x,z,w5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fZPxOkHx_tTE",
        "outputId": "084742c2-2626-4f4c-efae-79ff911e8467"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "convolution(x,z,w6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ohIoPaMAWioc",
        "outputId": "f0581aeb-6d23-4673-f446-fd7f2a9764d2"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exercise 2.3: Generalize the function below to handle variable padding and stride. Test it for stride 2 and padding 2."
      ],
      "metadata": {
        "id": "3JEyo5EX-7VE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.arange(20) # some input\n",
        "w1 = np.array([1,0,1])\n",
        "w2 = np.array([1,2,3])\n",
        "w3 = np.array([5,6,7])\n",
        "\n",
        "# add padding\n",
        "x = np.pad(x, 2)"
      ],
      "metadata": {
        "id": "_GiMrofW4MsU"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "stride = 2\n",
        "def convolution(x,z,w):\n",
        "  z=[]\n",
        "  for i in range(len(x)- (2*stride)):\n",
        "    if i == 0: \n",
        "      slice_start = i  \n",
        "    else: \n",
        "      slice_start = i + stride\n",
        "    if i == 0: \n",
        "      slice_end = i  + (len(w))\n",
        "    else: \n",
        "      slice_end = i + stride + (len(w))\n",
        "    slice = (slice_start,slice_end)\n",
        "\n",
        "    slice_previous = x[slice_start:slice_end]\n",
        "    num = calculation(slice_previous,w)\n",
        "    z.append(num)\n",
        "  return z"
      ],
      "metadata": {
        "id": "gOP7Bh2vMq6l"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "convolution(x,z,w1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FGkzegyOvaNt",
        "outputId": "2b085f80-f33f-4e42-bda2-bc1168afd7ad"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 18, 19]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "convolution(x,z,w2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v-fUWdh1XGQd",
        "outputId": "11aa5791-5475-4b94-a023-ddaff9135f41"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0,\n",
              " 14,\n",
              " 20,\n",
              " 26,\n",
              " 32,\n",
              " 38,\n",
              " 44,\n",
              " 50,\n",
              " 56,\n",
              " 62,\n",
              " 68,\n",
              " 74,\n",
              " 80,\n",
              " 86,\n",
              " 92,\n",
              " 98,\n",
              " 104,\n",
              " 110,\n",
              " 56,\n",
              " 19]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "convolution(x,z,w3)"
      ],
      "metadata": {
        "id": "OOHsdBcIXxoD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c7562c15-13e1-44bf-a9ba-2946fecef9df"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0,\n",
              " 38,\n",
              " 56,\n",
              " 74,\n",
              " 92,\n",
              " 110,\n",
              " 128,\n",
              " 146,\n",
              " 164,\n",
              " 182,\n",
              " 200,\n",
              " 218,\n",
              " 236,\n",
              " 254,\n",
              " 272,\n",
              " 290,\n",
              " 308,\n",
              " 326,\n",
              " 204,\n",
              " 95]"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    }
  ]
}